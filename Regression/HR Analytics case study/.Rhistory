align = "v",ncol = 1)
plot_grid(ggplot(telecom, aes(MonthlyCharges))+ geom_histogram(binwidth = 20),
ggplot(telecom, aes(x="",y=MonthlyCharges))+ geom_boxplot(width=0.1)+coord_flip()+box_theme,
align = "v",ncol = 1)
plot_grid(ggplot(telecom, aes(TotalCharges))+ geom_histogram(),
ggplot(telecom, aes(x="",y=TotalCharges))+ geom_boxplot(width=0.1)+coord_flip()+box_theme,
align = "v",ncol = 1)
# Boxplots of numeric variables relative to telecom status
plot_grid(ggplot(telecom, aes(x=Churn,y=tenure, fill=Churn))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="none"),
ggplot(telecom, aes(x=Churn,y=MonthlyCharges, fill=Churn))+ geom_boxplot(width=0.2)+
coord_flip() + box_theme_y,
ggplot(telecom, aes(x=Churn,y=TotalCharges, fill=Churn))+ geom_boxplot(width=0.2)+
coord_flip() + box_theme_y,
align = "v",nrow = 1)
# Correlation between numeric variables
library(GGally)
ggpairs(telecom[, c("tenure", "MonthlyCharges", "TotalCharges")])
# Bringing the variables in the correct format
telecom$SeniorCitizen<- ifelse(telecom$SeniorCitizen==1,"Yes","No")
# Outlier treatment and imputing missing value
#Boxplot showed no outlier, Nevertheless confirming it also with percentiles
sapply(telecom[,c("tenure","MonthlyCharges","TotalCharges")],
function(x) quantile(x,seq(0,1,.01),na.rm = T)) #no outlier
# Missing value
sapply(telecom, function(x) sum(is.na(x))) # shows all 11 NAs are in Totalcharges column
View(subset(telecom, is.na(TotalCharges))) # All 11 NAs in TotalCharges correspond to tenure 0
View(subset(telecom, telecom$tenure==0)) #vice-versa of above is also true
# It means that 11/7043 = 0.001561834 i.e 0.1%, best is to remove these observations from the analysis
telecom <- telecom[!is.na(telecom$TotalCharges),]
# Normalising continuous features
telecom$tenure<- scale(telecom$tenure) # scale used: mean 32.4, sd 24.6
telecom$MonthlyCharges<- scale(telecom$MonthlyCharges) # scale used: mean 64.8, sd 30.1
telecom$TotalCharges<- scale(telecom$TotalCharges) # scale used: mean 2280, sd 2267
# converting target variable telecom from No/Yes character to factorwith levels 0/1
telecom$Churn<- ifelse(telecom$Churn=="Yes",1,0)
Churn <- sum(telecom$Churn)/nrow(telecom)
Churn # 26.57% churn rate.
# creating a dataframe of categorical features
telecom_chr<- telecom[,-c(1,2,7,8,9)]
# converting categorical attributes to factor
telecom_fact<- data.frame(sapply(telecom_chr, function(x) factor(x)))
str(telecom_fact)
# creating dummy variables for factor attributes
dummies<- data.frame(sapply(telecom_fact,
function(x) data.frame(model.matrix(~x-1,data =telecom_fact))[,-1]))
# Final dataset
telecom_final<- cbind(telecom[,c(9,2,7,8)],dummies)
View(telecom_final) #7032 obs. of  31 variables
########################################################################
# splitting the data between train and test
set.seed(100)
indices = sample.split(telecom_final$Churn, SplitRatio = 0.7)
train = telecom_final[indices,]
test = telecom_final[!(indices),]
#Initial model
model_1 = glm(Churn ~ ., data = train, family = "binomial")
summary(model_1) #AIC 4150.1....31 coeff..nullDev 5699.5...resDev 4102.1
# Stepwise selection
library("MASS")
model_2<- stepAIC(model_1, direction="both")
summary(model_2)
# Removing multicollinearity through VIF check
library(car)
vif(model_2)
#Excluding TotalCharges
model_3<- glm(formula = Churn ~ tenure + MonthlyCharges +
PhoneService + Contract.xOne.year + Contract.xTwo.year +
PaperlessBilling + PaymentMethod.xElectronic.check + SeniorCitizen +
MultipleLines.xYes + InternetService.xFiber.optic + InternetService.xNo +
OnlineBackup.xYes + DeviceProtection.xYes + StreamingTV.xYes +
StreamingMovies.xYes, family = "binomial", data = train)
summary(model_3)
vif(model_3)
# Excluding MonthlyCharges
model_4<- glm(formula = Churn ~ tenure +
PhoneService + Contract.xOne.year + Contract.xTwo.year +
PaperlessBilling + PaymentMethod.xElectronic.check + SeniorCitizen +
MultipleLines.xYes + InternetService.xFiber.optic + InternetService.xNo +
OnlineBackup.xYes + DeviceProtection.xYes + StreamingTV.xYes +
StreamingMovies.xYes, family = "binomial", data = train)
summary(model_4)
vif(model_4) # cannot exclude any more variable based on vif
#Excluding OnlineBackup.xYes  due to lower significance
model_5<- glm(formula = Churn ~ tenure +
PhoneService + Contract.xOne.year + Contract.xTwo.year +
PaperlessBilling + PaymentMethod.xElectronic.check + SeniorCitizen +
MultipleLines.xYes + InternetService.xFiber.optic + InternetService.xNo +
DeviceProtection.xYes + StreamingTV.xYes +
StreamingMovies.xYes, family = "binomial", data = train)
summary(model_5)
#Excluding DeviceProtection.xYes  due to lower significance
model_6<- glm(formula = Churn ~ tenure +
PhoneService + Contract.xOne.year + Contract.xTwo.year +
PaperlessBilling + PaymentMethod.xElectronic.check + SeniorCitizen +
MultipleLines.xYes + InternetService.xFiber.optic + InternetService.xNo +
StreamingTV.xYes + StreamingMovies.xYes, family = "binomial", data = train)
summary(model_6)
#Excluding SeniorCitizen  due to lower significance
model_7<- glm(formula = Churn ~ tenure +
PhoneService + Contract.xOne.year + Contract.xTwo.year +
PaperlessBilling + PaymentMethod.xElectronic.check +
MultipleLines.xYes + InternetService.xFiber.optic + InternetService.xNo +
StreamingTV.xYes + StreamingMovies.xYes, family = "binomial", data = train)
summary(model_7)
#Excluding StreamingTV.xYes due to lower significance with respect to other 10 variables
model_8<- glm(formula = Churn ~ tenure +
PhoneService + Contract.xOne.year + Contract.xTwo.year +
PaperlessBilling + PaymentMethod.xElectronic.check +
MultipleLines.xYes + InternetService.xFiber.optic + InternetService.xNo +
StreamingMovies.xYes, family = "binomial", data = train)
summary(model_8)
final_model<- model_8
test_pred = predict(final_model, type = "response",
newdata = test[,-1])
test_actual_churn <- factor(ifelse(test$Churn==1,"Yes","No"))
table(test_actual_churn,test_pred_churn)
test_pred_churn <- factor(ifelse(test_pred >= 0.50, "Yes", "No"))
table(test_actual_churn,test_pred_churn)
#######################################################################
test_pred_churn <- factor(ifelse(test_pred >= 0.40, "Yes", "No"))
library(e1071)
test_conf <- confusionMatrix(test_pred_churn, test_actual_churn, positive = "Yes")
setwd("Z:/Vatsa/IIITB_Data Analytics/Term 3/HR Analytics case study")
in_time <- read.csv("in_time.csv", stringsAsFactors = FALSE)
out_time <- read.csv("out_time.csv", stringsAsFactors = FALSE)
employee_survey_data <- read.csv("employee_survey_data.csv", stringsAsFactors = FALSE)
manager_survey_data <- read.csv("manager_survey_data.csv", stringsAsFactors = FALSE)
general_data <- read.csv("general_data.csv", stringsAsFactors = FALSE)
# Finding the difference in employee ID
setdiff(employee_survey_data$EmployeeID,general_data$EmployeeID)
setdiff(manager_survey_data$EmployeeID,general_data$EmployeeID)
# setting column names for In time and out time data set
colnames(in_time)[1] <- "EmployeeID"
colnames(out_time)[1] <- "EmployeeID"
employee_master <- merge(general_data, employee_survey_data, by= "EmployeeID", all = FALSE)
employee_master <- merge(employee_master, manager_survey_data, by= "EmployeeID", all = FALSE)
# Finding the difference in employee ID for in time and out time
setdiff(in_time$EmployeeID,general_data$EmployeeID)
setdiff(out_time$EmployeeID,general_data$EmployeeID)
in_time_remove_NA <- apply(in_time,2, function(x)all(is.na(x)));
in_time_colsmiss <- names(in_time_remove_NA[in_time_remove_NA>0])
out_time_remove_NA <- apply(out_time,2, function(x)all(is.na(x)));
out_time_colsmiss <- names(out_time_remove_NA[in_time_remove_NA>0])
# Removing the columns with NA values which correspond to organisation holidays
library(dplyr)
in_time <- in_time[, !(names(in_time) %in% in_time_colsmiss)]
out_time <- out_time[, !(names(out_time) %in% out_time_colsmiss)]
# Checking if NAs which we observe in In time is same as out time
in_time_NA <- data.frame(sapply(in_time, function(x) is.na(x)))
out_time_NA<- data.frame(sapply(out_time, function(x) is.na(x)))
all_equal(in_time_NA, out_time_NA)
in_time <- read.csv("in_time.csv", stringsAsFactors = FALSE)
out_time <- read.csv("out_time.csv", stringsAsFactors = FALSE)
employee_survey_data <- read.csv("employee_survey_data.csv", stringsAsFactors = FALSE)
manager_survey_data <- read.csv("manager_survey_data.csv", stringsAsFactors = FALSE)
general_data <- read.csv("general_data.csv", stringsAsFactors = FALSE)
# Finding the difference in employee ID
setdiff(employee_survey_data$EmployeeID,general_data$EmployeeID)
setdiff(manager_survey_data$EmployeeID,general_data$EmployeeID)
# setting column names for In time and out time data set
colnames(in_time)[1] <- "EmployeeID"
colnames(out_time)[1] <- "EmployeeID"
employee_master <- merge(general_data, employee_survey_data, by= "EmployeeID", all = FALSE)
employee_master <- merge(employee_master, manager_survey_data, by= "EmployeeID", all = FALSE)
# Finding the difference in employee ID for in time and out time
setdiff(in_time$EmployeeID,general_data$EmployeeID)
setdiff(out_time$EmployeeID,general_data$EmployeeID)
# Checking if NAs which we observe in In time is same as out time
library(dplyr)
all_equal(sapply(in_time, is.na), sapply(out_time, is.na))
in_time <- in_time[,colSums(is.na(in_time))<nrow(in_time)]
out_time <- out_time[,colSums(is.na(out_time))<nrow(out_time)]
#. next step is to calculate the number of holidays spent by employee
employee_master$holidays <- apply(in_time, 1, function(x) sum(is.na(x)))
in_time <- data.frame(apply(in_time, 2, function(x) as.POSIXlt(x, format = "%Y-%m-%d %H:%M")))
out_time <- data.frame(apply(out_time, 2, function(x) as.POSIXlt(x, format = "%Y-%m-%d %H:%M")))
diff_time <- data.frame(sapply(out_time - in_time,as.numeric))[-1]
employee_master$totalhours <- apply(diff_time, 1, function(x) sum(x, na.rm = TRUE))
# Removing unwanted columns
length(employee_master$EmployeeCount==1)
length(employee_master$StandardHours==8)
length(employee_master$Over18=='Y')
# Since these columns have the same information, we can delete these rows
employee_master <- employee_master[, !(names(employee_master) %in%
c("EmployeeCount", "StandardHours", "Over18"))]
sapply(employee_master[,c(13:17)],
function(x) quantile(x,seq(0,1,.01),na.rm = T)) #no significant outlier
sapply(employee_master[,c(18:21)],
function(x) quantile(x,seq(0,1,.01),na.rm = T)) #no outlier
# Understanding NA values
sapply(employee_master, function(x) sum(is.na(x)))
# Given that we cannot remove these variables and there is no relation between NA values
# and the other variables, NA will be replaced by the mode.
mode_val <- function(x){
uniq <- unique(x)
uniq[which.max(tabulate(match(x, uniq)))]
}
employee_master <- data.frame(lapply(employee_master, function(x) replace(x, is.na(x), mode_val(x))))
# Salary information to be binned for bar chart.
employee_master$MonthlyIncome_bin <-  with(employee_master,
ifelse(employee_master$MonthlyIncome > 150000,"> 150000",
ifelse(employee_master$MonthlyIncome > 100000,"> 100000",
ifelse(employee_master$MonthlyIncome > 75000,"> 750000",
ifelse(employee_master$MonthlyIncome > 40000,"> 400000","< 400000")))))
sapply(employee_master[,c(22:25)],
function(x) quantile(x,seq(0,1,.01),na.rm = T)) #no outlier
sapply(employee_master[,c(26:28)],
function(x) quantile(x,seq(0,1,.01),na.rm = T)) #no outlier
# Calculate the overall attrition percentage: ~ 16%
(sum(employee_master$Attrition=='Yes')/ length(employee_master$Attrition))*100
# Barcharts for categorical features with stacked employee information
library(ggplot2)
library(cowplot)
bar_theme1<- theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.position="none")
plot_grid(ggplot(employee_master, aes(x=Age,fill=Attrition))+ geom_bar(position = "fill"),
ggplot(employee_master, aes(x=BusinessTravel,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=Department,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=DistanceFromHome,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=Education,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=EducationField,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
align = "h")
plot_grid(ggplot(employee_master, aes(x=Gender,fill=Attrition))+ geom_bar(position = "fill"),
ggplot(employee_master, aes(x=JobLevel,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=JobRole,fill=Attrition)) + geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=MaritalStatus,fill=Attrition)) + geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=MonthlyIncome_bin,fill=Attrition)) + geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=NumCompaniesWorked,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
align = "h")
plot_grid(ggplot(employee_master, aes(x=PercentSalaryHike,fill=Attrition)) + geom_bar(position = "fill"),
ggplot(employee_master, aes(x=StockOptionLevel,fill=Attrition)) + geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=TotalWorkingYears,fill=Attrition)) + geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=TrainingTimesLastYear,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=YearsAtCompany,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=YearsSinceLastPromotion,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
align = "h")
plot_grid(ggplot(employee_master, aes(x=YearsWithCurrManager,fill=Attrition))+ geom_bar(position = "fill"),
ggplot(employee_master, aes(x=EnvironmentSatisfaction,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=JobSatisfaction,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=WorkLifeBalance,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=JobInvolvement,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
ggplot(employee_master, aes(x=PerformanceRating,fill=Attrition))+ geom_bar(position = "fill")+bar_theme1,
align = "h")
ggplot(employee_master, aes(x=holidays,fill=Attrition))+ geom_bar(position = "fill")
# For columns having two levels changing the columns to 1 or 0
employee_master$Attrition<- ifelse(employee_master$Attrition=="Yes",1,0)
employee_master$Gender <- ifelse(employee_master$Gender=="Male",1,0)
# Discarding the employees who have worked for 40 years as they're probably retiring
employee_master <- employee_master[!(employee_master$TotalWorkingYears==40),]
# creating a dataframe of categorical data and covert to factors
employee_fact<- data.frame(sapply(employee_master[,c(4,5,8,11,12)], factor))
str(employee_fact)
# creating dummy variables for factor attributes
dummies<- data.frame(sapply(employee_fact,
function(x) data.frame(model.matrix(~x-1,data =employee_fact))[,-1]))
# Final dataset after removing categorical variables.
# Removed binned monthly income variable. salary would be scaled along with other numeric variables
employee_master<- cbind(employee_master[,-c(4,5,8,11,12,29)],dummies)
employee_fact <- NULL
dummies <- NULL
employee_master[,c(2,4,8,10,12,14,22,23)] <- lapply(employee_master[,c(2,4,8,10,12,14,22, 23)], scale)
########################################################################
# splitting the data between train and test
set.seed(100)
sel_index = sample(1:nrow(employee_master), 0.7*nrow(employee_master))
train = employee_master[sel_index,]
test_empl_att = employee_master[-sel_index,]
#Initial model
library("car")
model_1 = glm(Attrition ~ ., data = train, family = "binomial")
summary(model_1)
# Removing unwanted variables through Stepwise selection
library("MASS")
model_2<- stepAIC(model_1, direction="both")
summary(model_2)
library(MASS)
library(car)
library(e1071)
library(caret)
install.packages("generics")
library(caret)
install.packages("gower")
library(caret)
install.packages("lava")
library(caret)
library(ggplot2)
library(cowplot)
library(GGally)
library(caTools)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(gridExtra)
library(corrplot)
library(caret)
library(pROC)
emp_sur<-read.csv("employee_survey_data.csv",stringsAsFactors = FALSE)
man_sur<-read.csv("manager_survey_data.csv",stringsAsFactors = FALSE)
in_time<-read.csv("in_time.csv",stringsAsFactors = FALSE)
out_time<-read.csv("out_time.csv",stringsAsFactors = FALSE)
gen_dat<-read.csv("general_data.csv",stringsAsFactors = FALSE)
str(emp_sur) #4410 obs of 4 variables
str(man_sur) #4410 obs of 3 variables
str(in_time) #4410 obs of 262 variables #Date stored as character# Some Dates have NA for all values
str(out_time)#4410 obs of 262 variables #Date stored as character# Some Dates have NA for all values
str(gen_dat) #4410 obs of 24 variables
length(unique(emp_sur$EmployeeID))
length(unique(gen_dat$EmployeeID))
length(unique(in_time$X))
length(unique(out_time$X))
length(unique(man_sur$EmployeeID))
setdiff(emp_sur$EmployeeID,gen_dat$EmployeeID) # Identical EmployeeID across these datasets
setdiff(emp_sur$EmployeeID,man_sur$EmployeeID)
setdiff(emp_sur$EmployeeID,in_time$X)
setdiff(emp_sur$EmployeeID,out_time$X)
in_time <- in_time[ , !apply(is.na(in_time), 2, all)]
out_time<-out_time[ , !apply(is.na(out_time), 2, all)]
#Lets check whether all column names match in both Intime and Outtime are same
which(!colnames(in_time) == colnames(out_time))
#Convert all other NAs to Blank
in_time[is.na(in_time)] <- " "
out_time[is.na(out_time)]<-" "
sum(is.na(in_time))
sum(is.na(out_time))
#Convert all the date columns from character to DateTime format in InTime
in_time[,2:250] <- lapply(in_time[,2:250], function(x) as_datetime(x))
str(in_time)
#Convert all the date columns from character to DateTime format in OutTime
out_time[,2:250] <- lapply(out_time[,2:250], function(x) as_datetime(x))
str(out_time)
#Calculate the work hours of each employee everyday as difference of outtime & intime
w<-out_time[,2:250]-in_time[,2:250]
View(w)
#Adding Employee ID
w_h<-cbind(in_time[,c("X")],w)
View(w_h)
names(w_h)[1]<-paste("X")
#Convert the hours to number format
w_h[,2:250] <- lapply(w_h[,2:250], function(x) as.numeric(x))
#Calculating the avg work hours of each employee taking row means
w_h$work_avg <- rowMeans(w_h[,2:250], na.rm = TRUE)
#View the table derived
str(w_h)
#Create a new dataframe consisting of Employee ID and Office time hrs.
office_Working_Hrs <- data.frame(w_h$X, w_h$work_avg)
colnames(office_Working_Hrs ) <- c("EmployeeID", "WorkingHrs")
#Rounding off the working hours to two decimal points
office_Working_Hrs $OfficeHrs <- round(office_Working_Hrs $WorkingHrs, 2)
#Removing working hours column
office_Working_Hrs<-office_Working_Hrs[, !(colnames(office_Working_Hrs) %in% c("WorkingHrs"))]
View(office_Working_Hrs)
#Calculating OverTime if WorkingHrs is greater than 8
office_Working_Hrs$OverTime <- ifelse(office_Working_Hrs$OfficeHrs>8,1,0)
#View the table derived
str(office_Working_Hrs)
Emp_Attr<- merge(gen_dat,emp_sur, by="EmployeeID", all = F)
Emp_Attr<- merge(Emp_Attr,man_sur, by="EmployeeID", all = F)
Emp_Attr<- merge(Emp_Attr,office_Working_Hrs, by="EmployeeID", all = F)
str(Emp_Attr)
bar_theme1<- theme(axis.text.x = element_text(angle = 90, hjust = 1.0, vjust = 0.25),
legend.position="right")
plot_grid(ggplot(Emp_Attr,aes(x=BusinessTravel,fill=Attrition))+ geom_bar()+bar_theme1)
plot_grid( ggplot(Emp_Attr,aes(x=Department,fill=Attrition))+ geom_bar()+bar_theme1)
plot_grid(ggplot(Emp_Attr,aes(x=EducationField,fill=Attrition))+ geom_bar()+bar_theme1)
plot_grid(ggplot(Emp_Attr,aes(x=Gender,fill=Attrition))+ geom_bar()+bar_theme1)
plot_grid(ggplot(Emp_Attr,aes(x=JobRole,fill=Attrition))+ geom_bar()+bar_theme1)
plot_grid(ggplot(Emp_Attr,aes(x=MaritalStatus,fill=Attrition))+ geom_bar()+bar_theme1)
plot_grid(ggplot(Emp_Attr,aes(x=factor(JobLevel),fill=Attrition))+ geom_bar()+bar_theme1)
plot_grid(ggplot(Emp_Attr,aes(x=factor(EnvironmentSatisfaction),fill=Attrition))+ geom_bar()+bar_theme1)
plot_grid(ggplot(Emp_Attr,aes(x=factor(WorkLifeBalance),fill=Attrition))+ geom_bar()+bar_theme1)
plot_grid(ggplot(Emp_Attr,aes(x=factor(JobSatisfaction),fill=Attrition))+ geom_bar()+bar_theme1)
plot_grid(ggplot(Emp_Attr,aes(x=factor(JobInvolvement),fill=Attrition))+ geom_bar()+bar_theme1)
plot_grid(ggplot(Emp_Attr,aes(x=factor(PerformanceRating),fill=Attrition))+ geom_bar()+bar_theme1)
plot_grid(ggplot(Emp_Attr,aes(x=factor(OverTime),fill=Attrition))+ geom_bar()+bar_theme1)
box_theme<- theme(axis.line=element_blank(),axis.title=element_blank(),
axis.ticks=element_blank(), axis.text=element_blank())
box_theme_y<- theme(axis.line.y=element_blank(),axis.title.y=element_blank(),
axis.ticks.y=element_blank(), axis.text.y=element_blank(),
legend.position="none")
plot_grid(ggplot(Emp_Attr, aes(MonthlyIncome))+ geom_histogram(binwidth = 20000),
ggplot(Emp_Attr, aes(x="",y=MonthlyIncome))+ geom_boxplot(width=0.1)+coord_flip()+box_theme,
align = "v",ncol = 1)
plot_grid(ggplot(Emp_Attr, aes(NumCompaniesWorked))+ geom_histogram(binwidth = 5),
ggplot(Emp_Attr, aes(x="",y=NumCompaniesWorked))+ geom_boxplot(width=0.1)+coord_flip()+box_theme,
align = "v",ncol = 1)
plot_grid(ggplot(Emp_Attr, aes(DistanceFromHome))+ geom_histogram(binwidth = 10),
ggplot(Emp_Attr, aes(x="",y=DistanceFromHome))+ geom_boxplot(width=0.1)+coord_flip()+box_theme,
align = "v",ncol = 1)
plot_grid(ggplot(Emp_Attr, aes(Age))+ geom_histogram(binwidth = 5),
ggplot(Emp_Attr, aes(x="",y=Age))+ geom_boxplot(width=0.1)+coord_flip()+box_theme,
align = "v",ncol = 1)
plot_grid(ggplot(Emp_Attr, aes(PercentSalaryHike))+ geom_histogram(binwidth = 5),
ggplot(Emp_Attr, aes(x="",y=PercentSalaryHike))+ geom_boxplot(width=0.1)+coord_flip()+box_theme,
align = "v",ncol = 1)
plot_grid(ggplot(Emp_Attr, aes(TotalWorkingYears))+ geom_histogram(binwidth = 5),
ggplot(Emp_Attr, aes(x="",y=TotalWorkingYears))+ geom_boxplot(width=0.1)+coord_flip()+box_theme,
align = "v",ncol = 1)
plot_grid(ggplot(Emp_Attr, aes( TrainingTimesLastYear))+ geom_histogram(binwidth = 2.5),
ggplot(Emp_Attr, aes(x="",y= TrainingTimesLastYear))+ geom_boxplot(width=0.1)+coord_flip()+box_theme,
align = "v",ncol = 1)
plot_grid(ggplot(Emp_Attr, aes(YearsAtCompany))+ geom_histogram(binwidth = 10),
ggplot(Emp_Attr, aes(x="",y=YearsAtCompany))+ geom_boxplot(width=0.1)+coord_flip()+box_theme,
align = "v",ncol = 1)
#YearsAtCompany Has Outliers--Defining Upper Boundary required#
plot_grid(ggplot(Emp_Attr, aes(YearsSinceLastPromotion))+ geom_histogram(binwidth = 5),
ggplot(Emp_Attr, aes(x="",y=YearsSinceLastPromotion))+ geom_boxplot(width=0.1)+coord_flip()+box_theme,
align = "v",ncol = 1)
plot_grid(ggplot(Emp_Attr, aes(YearsWithCurrManager))+ geom_histogram(binwidth = 5),
ggplot(Emp_Attr, aes(x="",y=YearsWithCurrManager))+ geom_boxplot(width=0.1)+coord_flip()+box_theme,
align = "v",ncol = 1)
plot_grid(ggplot(Emp_Attr, aes(OfficeHrs))+ geom_histogram(binwidth = 2),
ggplot(Emp_Attr, aes(x="",y=OfficeHrs))+ geom_boxplot(width=0.1)+coord_flip()+box_theme,
align = "v",ncol = 1)
sapply(Emp_Attr, function(x) sum(is.na(x)))
# Missing values in Merged Dataset
sum(is.na(Emp_Attr))/nrow(Emp_Attr)*100 # 2.51%
# Rather than treating these missing values, best is to get rid of these observations.
Emp_Attr<- data.frame(na.omit(Emp_Attr))
which(apply(Emp_Attr, 2, function(x) length(unique(x)) == 1)==TRUE)
Emp_Attr[,c("EmployeeCount","Over18","StandardHours")]<-list(NULL)
str(Emp_Attr)
#--------Updating Outliers in Numerical Variables-----------------------------------#
#Outlier Treatment#
#Monthly Income
boxplot(Emp_Attr$MonthlyIncome)
UB_MI<-quantile(Emp_Attr$MonthlyIncome,0.75)+1.5*IQR(Emp_Attr$MonthlyIncome)
UB_MI
length(Emp_Attr$MonthlyIncome[Emp_Attr$MonthlyIncome>UB_MI])###outliers
Emp_Attr$MonthlyIncome[Emp_Attr$MonthlyIncome>UB_MI]<-UB_MI
boxplot(Emp_Attr$MonthlyIncome)
#TotalWorkingYears
boxplot(Emp_Attr$TotalWorkingYears)
UB_TY<-quantile(Emp_Attr$TotalWorkingYears,0.75)+1.5*IQR(Emp_Attr$TotalWorkingYears)
UB_TY
length(Emp_Attr$TotalWorkingYears[Emp_Attr$TotalWorkingYears>UB_TY])###outliers
Emp_Attr$TotalWorkingYears[Emp_Attr$TotalWorkingYears>UB_TY]<-UB_TY
boxplot(Emp_Attr$TotalWorkingYears)
#TrainingTimesLastYear
boxplot(Emp_Attr$TrainingTimesLastYear)
UB_TTLY<-quantile(Emp_Attr$TrainingTimesLastYear,0.75)+1.5*IQR(Emp_Attr$TrainingTimesLastYear)
UB_TTLY
length(Emp_Attr$TrainingTimesLastYear[Emp_Attr$TrainingTimesLastYear>UB_TTLY])###outliers
Emp_Attr$TrainingTimesLastYear[Emp_Attr$TrainingTimesLastYear>UB_TTLY]<-UB_TTLY
boxplot(Emp_Attr$TrainingTimesLastYear)
#YearsAtCompany
boxplot(Emp_Attr$YearsAtCompany)
UB_YC<-quantile(Emp_Attr$YearsAtCompany,0.75)+1.5*IQR(Emp_Attr$YearsAtCompany)
UB_YC
length(Emp_Attr$YearsAtCompany[Emp_Attr$YearsAtCompany>UB_YC])###outliers
Emp_Attr$YearsAtCompany[Emp_Attr$YearsAtCompany>UB_YC]<-UB_YC
boxplot(Emp_Attr$YearsAtCompany)
#YearsSinceLastPromotion
boxplot(Emp_Attr$YearsSinceLastPromotion)
UB_LP<-quantile(Emp_Attr$YearsSinceLastPromotion,0.75)+1.5*IQR(Emp_Attr$YearsSinceLastPromotion)
UB_LP
length(Emp_Attr$YearsSinceLastPromotion[Emp_Attr$YearsSinceLastPromotion>UB_LP])###outliers
Emp_Attr$YearsSinceLastPromotion[Emp_Attr$YearsSinceLastPromotion>UB_LP]<-UB_LP
boxplot(Emp_Attr$YearsSinceLastPromotion)
#YearsWithCurrManager
boxplot(Emp_Attr$YearsWithCurrManager)
UB_YC<-quantile(Emp_Attr$YearsWithCurrManager,0.75)+1.5*IQR(Emp_Attr$YearsWithCurrManager)
UB_YC
length(Emp_Attr$YearsWithCurrManager[Emp_Attr$YearsWithCurrManager>UB_YC])###outliers
Emp_Attr$YearsWithCurrManager[Emp_Attr$YearsWithCurrManager>UB_YC]<-UB_YC
boxplot(Emp_Attr$YearsWithCurrManager)
#OfficeHrs
boxplot(Emp_Attr$OfficeHrs)
UB_OH<-quantile(Emp_Attr$OfficeHrs,0.75)+1.5*IQR(Emp_Attr$OfficeHrs)
UB_OH
length(Emp_Attr$OfficeHrs[Emp_Attr$OfficeHrs>UB_OH])##OUtliers
Emp_Attr$OfficeHrs[Emp_Attr$OfficeHrs>UB_OH]<-UB_OH
boxplot(Emp_Attr$OfficeHrs)
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=DistanceFromHome, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=NumCompaniesWorked, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=Age, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=MonthlyIncome, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=PercentSalaryHike, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=DistanceFromHome, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=DistanceFromHome, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=NumCompaniesWorked, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=Age, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=MonthlyIncome, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=PercentSalaryHike, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=TotalWorkingYears, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=TrainingTimesLastYear, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=YearsAtCompany, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=YearsSinceLastPromotion, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=YearsWithCurrManager, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
plot_grid(ggplot(Emp_Attr, aes(x=Attrition,y=OfficeHrs, fill=Attrition))+ geom_boxplot(width=0.2)+
coord_flip() +theme(legend.position="Right"))
# Correlation between numeric variables
ggpairs(Emp_Attr[, c("OfficeHrs", "YearsWithCurrManager", "YearsSinceLastPromotion",
"YearsAtCompany","TrainingTimesLastYear","TotalWorkingYears","PercentSalaryHike",
"MonthlyIncome","Age","NumCompaniesWorked","DistanceFromHome")])
