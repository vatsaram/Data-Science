install.packages("swirl")
install.packages("stringr")
install.packages("dplyr")
install.packages("tidyr")
install.packages("MASS")
install.packages("car")
install.packages("e1071")
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("cowplot")
install.packages("GGally")
install.packages("dplyr")
install.packages("tidyr")
install.packages("lubridate")
#install.packages("stringr")
install.packages("gridExtra")
install.packages("corrplot")
install.packages("caret")
install.packages("pROC")
library(MASS)
library(car)
library(e1071)
library(caret)
library(ggplot2)
library(cowplot)
library(GGally)
library(caTools)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(gridExtra)
library(corrplot)
library(caret)
library(pROC)
library(car)
library(e1071)
library(caret)
install.packages("ggplot2")
library(ggplot2)
library(cowplot)
library(GGally)
library(caTools)
install.packages("caTools")
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(gridExtra)
library(corrplot)
library(caret)
library(pROC)
n = 200
x = sample(10:35, n, replace = T) + rnorm(n, mean=2, sd=0.5)
y = sqrt(400 - (x-20)^2) + rnorm(n, mean=20, sd=0.5)
plot(x, y)
p = (x-M)^2
q = (y-M)^2
plot(p, q)
plot(x, y)
n = 200
x = sample(10:35, n, replace = T) + rnorm(n, mean=2, sd=0.5)
y = sqrt(400 - (x-20)^2) + rnorm(n, mean=20, sd=0.5)
plot(x, y)
p = (x-M)^2
q = (y-M)^2
plot(p, q)
M = 5
p = (x-M)^2
q = (y-M)^2
plot(p, q)
M = 20
p = (x-M)^2
q = (y-M)^2
plot(p, q)
plot(x, y)
M = 5
p = (x-M)^2
q = (y-M)^2
plot(p, q)
M = 20
p = (x-M)^2
q = (y-M)^2
plot(p, q)
M = 30
p = (x-M)^2
q = (y-M)^2
plot(p, q)
M = 40
p = (x-M)^2
q = (y-M)^2
plot(p, q)
setwd("//192.168.0.1/Admin/Vatsa/IIITB_Data Analytics/Term 4/SVM_Assign")
library(kernlab)
library(readr)
library(caret)
library(gridExtra)
mnist_total_set_read <- read_csv("mnist_train.csv", col_names = FALSE)
mnist_tst_set_read <- read_csv("mnist_test.csv", col_names = FALSE)
# to avoid reading the csv multiple times as part of coding, above variable has been used
mnist_total_set <- mnist_total_set_read
mnist_tst_set <- mnist_tst_set_read
dim(mnist_total_set)
dim(mnist_tst_set)
sum(is.na(mnist_total_set))
sum(is.na(mnist_tst_set))
str(mnist_total_set)
str(mnist_tst_set)
# setting the values as numeric since some of the columns are of type double
mnist_total_set <- data.frame(lapply(mnist_total_set, as.numeric))
mnist_tst_set <- data.frame(lapply(mnist_tst_set, as.numeric))
colnames(mnist_total_set)[1] <- "Numbers"
colnames(mnist_tst_set)[1] <- "Numbers"
mnist_total_set$Numbers<-factor(mnist_total_set$Numbers)
mnist_tst_set$Numbers<-factor(mnist_tst_set$Numbers)
str(mnist_total_set)
str(mnist_tst_set)
set.seed(100)
indices_training = sample(1:nrow(mnist_total_set), 0.15*nrow(mnist_total_set))
mninst_train_data = mnist_total_set[indices_training, ]
mninst_train_data[,-1] <- mninst_train_data[,-1]/255
mnist_tst_set[,-1] <- mnist_tst_set[,-1]/255
#Using Linear Kernel
Linear_model <- ksvm(Numbers~ ., data = mninst_train_data, kernel = "vanilladot", scale = FALSE)
Linear_evaln<- predict(Linear_model, mnist_tst_set)
#confusion matrix - Linear Kernel
confusionMatrix(Linear_evaln,mnist_tst_set$Numbers)
#Using Linear Kernel
Linear_model <- ksvm(Numbers~ ., data = mninst_train_data, scale = FALSE, C=15)
Linear_evaln<- predict(Linear_model, mnist_tst_set)
#confusion matrix - Linear Kernel
confusionMatrix(Linear_evaln,mnist_tst_set$Numbers)
#Using Linear Kernel
Linear_model <- ksvm(Numbers~ ., data = mninst_train_data, scale = FALSE, C=10)
Linear_evaln<- predict(Linear_model, mnist_tst_set)
#confusion matrix - Linear Kernel
confusionMatrix(Linear_evaln,mnist_tst_set$Numbers)
